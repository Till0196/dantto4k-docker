name: Build Docker Images
run-name: Build Docker Images - ${{ github.event_name }}

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      base-targets: ${{ steps.analyze-deps.outputs.base-targets }}
      dependent-targets: ${{ steps.analyze-deps.outputs.dependent-targets }}
      base-matrix: ${{ steps.base-matrix.outputs.matrix }}
      dependent-matrix: ${{ steps.dependent-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Analyze target dependencies
        id: analyze-deps
        run: |
          # Get all targets and analyze their contexts for target: dependencies
          bake_data=$(docker buildx bake --print all)
          
          # Find base targets (no target: dependencies in contexts)
          base_targets=$(echo "$bake_data" | jq -r '
            .target | to_entries | 
            map(select(
              (.value.contexts // {} | to_entries | map(.value | startswith("target:")) | any) == false
            )) | 
            map(.key) | @json
          ')
          echo "base-targets=$base_targets" >> $GITHUB_OUTPUT
          
          # Find dependent targets (have target: dependencies in contexts)
          dependent_targets=$(echo "$bake_data" | jq -r '
            .target | to_entries | 
            map(select(
              (.value.contexts // {} | to_entries | map(.value | startswith("target:")) | any) == true
            )) | 
            map(.key) | @json
          ')
          echo "dependent-targets=$dependent_targets" >> $GITHUB_OUTPUT

      - name: Create base target matrix
        id: base-matrix
        run: |
          # Create matrix for base targets
          bake_data=$(docker buildx bake --print all)
          base_targets='${{ steps.analyze-deps.outputs.base-targets }}'
          
          echo "DEBUG: Base targets from analyze step: $base_targets"
          echo "DEBUG: Checking which targets are in base list:"
          echo "$bake_data" | jq -r --argjson bases "$base_targets" '.target | keys[] as $k | "\($k): \($bases | contains([$k]))"'
          
          matrix=$(echo "$bake_data" | jq -c --argjson bases "$base_targets" '
            .target | to_entries | 
            map(select(.key as $k | $bases | contains([$k]))) |
            map({
              target: .key,
              image: (.value.tags[0] // "ghcr.io/till0196/\(.key)" | split(":")[0])
            })
          ')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

      - name: Create dependent target matrix
        id: dependent-matrix
        run: |
          # Create matrix for dependent targets
          bake_data=$(docker buildx bake --print all)
          dependent_targets='${{ steps.analyze-deps.outputs.dependent-targets }}'
          
          matrix=$(echo "$bake_data" | jq -c --argjson deps "$dependent_targets" '
            .target | to_entries | 
            map(select(.key as $k | $deps | contains([$k]))) |
            map({
              target: .key,
              image: (.value.tags[0] // "ghcr.io/till0196/\(.key)" | split(":")[0])
            })
          ')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

      - name: Show outputs
        run: |
          echo "Base Targets: ${{ steps.analyze-deps.outputs.base-targets }}"
          echo "Dependent Targets: ${{ steps.analyze-deps.outputs.dependent-targets }}"
          echo "Base Matrix: ${{ steps.base-matrix.outputs.matrix }}"
          echo "Dependent Matrix: ${{ steps.dependent-matrix.outputs.matrix }}"

  build-base:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        target-info: ${{ fromJson(needs.prepare.outputs.base-matrix) }}
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "TARGET_NAME=${{ matrix.target-info.target }}" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=$(echo ${{ matrix.target-info.image }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push by digest
        uses: docker/bake-action@v6
        id: bake
        with:
          source: "."
          files: ./docker-bake.hcl
          targets: ${{ env.TARGET_NAME }}
          set: |
            *.platform=${{ matrix.platform }}
            *.tags=${{ env.REGISTRY_IMAGE }}
            *.output=type=image,push-by-digest=true,name-canonical=true,push=true
            *.cache-from=type=gha,scope=${{ env.TARGET_NAME }}-${{ env.PLATFORM_PAIR }}
            *.cache-to=type=gha,mode=max,scope=${{ env.TARGET_NAME }}-${{ env.PLATFORM_PAIR }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.bake.outputs.digest }}"
          touch "/tmp/digests/${{ env.TARGET_NAME }}-${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.TARGET_NAME }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  build-dependent:
    needs: [prepare, merge-base]
    strategy:
      fail-fast: false
      matrix:
        target-info: ${{ fromJson(needs.prepare.outputs.dependent-matrix) }}
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "TARGET_NAME=${{ matrix.target-info.target }}" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=$(echo ${{ matrix.target-info.image }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push by digest
        uses: docker/bake-action@v6
        id: bake
        with:
          source: "."
          files: ./docker-bake.hcl
          targets: ${{ env.TARGET_NAME }}
          set: |
            *.platform=${{ matrix.platform }}
            *.tags=${{ env.REGISTRY_IMAGE }}
            *.output=type=image,push-by-digest=true,name-canonical=true,push=true
            *.cache-from=type=gha,scope=${{ env.TARGET_NAME }}-${{ env.PLATFORM_PAIR }}
            *.cache-to=type=gha,mode=max,scope=${{ env.TARGET_NAME }}-${{ env.PLATFORM_PAIR }}
            BUILD_BASE_IMAGE=false

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.bake.outputs.digest }}"
          touch "/tmp/digests/${{ env.TARGET_NAME }}-${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.TARGET_NAME }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-base:
    runs-on: ubuntu-latest
    needs: [prepare, build-base]
    strategy:
      matrix:
        target-info: ${{ fromJson(needs.prepare.outputs.base-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          echo "TARGET_NAME=${{ matrix.target-info.target }}" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=$(echo ${{ matrix.target-info.image }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ env.TARGET_NAME }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        run: |
          # Get tags from the original bake definition (from repo root)
          cd $GITHUB_WORKSPACE
          bake_data=$(docker buildx bake --print all)
          tags=$(echo "$bake_data" | jq -r '.target."${{ env.TARGET_NAME }}".tags[]')
          
          # Create tag arguments for imagetools
          tag_args=""
          while IFS= read -r tag; do
            tag_args="$tag_args -t $tag"
          done <<< "$tags"
          
          # Change to digests directory for imagetools command
          cd /tmp/digests
          
          # Debug: List available digest files
          echo "DEBUG: Available digest files:"
          ls -la ${{ env.TARGET_NAME }}-* 2>/dev/null || echo "No digest files found for ${{ env.TARGET_NAME }}"
          
          # Check if digest files exist
          if ls ${{ env.TARGET_NAME }}-* 1> /dev/null 2>&1; then
            docker buildx imagetools create \
              $tag_args \
              $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' ${{ env.TARGET_NAME }}-*)
          else
            echo "ERROR: No digest files found for ${{ env.TARGET_NAME }}"
            exit 1
          fi

      - name: Inspect image
        run: |
          # Get the first tag for inspection
          bake_data=$(docker buildx bake --print all)
          first_tag=$(echo "$bake_data" | jq -r '.target."${{ env.TARGET_NAME }}".tags[0]')
          docker buildx imagetools inspect "$first_tag"

  merge-dependent:
    runs-on: ubuntu-latest
    needs: [prepare, build-dependent]
    strategy:
      matrix:
        target-info: ${{ fromJson(needs.prepare.outputs.dependent-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          echo "TARGET_NAME=${{ matrix.target-info.target }}" >> $GITHUB_ENV
          echo "REGISTRY_IMAGE=$(echo ${{ matrix.target-info.image }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ env.TARGET_NAME }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        run: |
          # Get tags from the original bake definition (from repo root)
          cd $GITHUB_WORKSPACE
          bake_data=$(docker buildx bake --print all)
          tags=$(echo "$bake_data" | jq -r '.target."${{ env.TARGET_NAME }}".tags[]')
          
          # Create tag arguments for imagetools
          tag_args=""
          while IFS= read -r tag; do
            tag_args="$tag_args -t $tag"
          done <<< "$tags"
          
          # Change to digests directory for imagetools command
          cd /tmp/digests
          
          # Debug: List available digest files
          echo "DEBUG: Available digest files:"
          ls -la ${{ env.TARGET_NAME }}-* 2>/dev/null || echo "No digest files found for ${{ env.TARGET_NAME }}"
          
          # Check if digest files exist
          if ls ${{ env.TARGET_NAME }}-* 1> /dev/null 2>&1; then
            docker buildx imagetools create \
              $tag_args \
              $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' ${{ env.TARGET_NAME }}-*)
          else
            echo "ERROR: No digest files found for ${{ env.TARGET_NAME }}"
            exit 1
          fi

      - name: Inspect image
        run: |
          # Get the first tag for inspection
          bake_data=$(docker buildx bake --print all)
          first_tag=$(echo "$bake_data" | jq -r '.target."${{ env.TARGET_NAME }}".tags[0]')
          docker buildx imagetools inspect "$first_tag"
