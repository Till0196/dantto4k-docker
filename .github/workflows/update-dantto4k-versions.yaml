name: Update Dantto4k Versions

on:
  schedule:
    # Run every Monday at 08:30 JST (23:30 UTC Sunday) - before Renovate
    - cron: '30 23 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update dantto4k versions to latest 3
        id: update-versions
        shell: bash
        run: |
          # Get latest 3 releases from GitHub API
          echo "Fetching latest releases from nekohkr/dantto4k..."
          latest_releases=$(curl -s "https://api.github.com/repos/nekohkr/dantto4k/releases" | \
            jq -r '.[].tag_name' | \
            grep -E '^v' | \
            sed 's/^v//' | \
            head -3)
          
          echo "Latest 3 releases:"
          echo "$latest_releases"
          
          # Get current versions from docker-bake.hcl
          current_versions=$(grep -A 10 'DANTTO4K_VERSIONS' docker-bake.hcl | \
            grep -E '^\s*"[^"]*"' | \
            sed 's/.*"\([^"]*\)".*/\1/' | \
            sort -u)
          
          echo "Current versions in docker-bake.hcl:"
          echo "$current_versions"
          
          # Check if update is needed
          new_versions_list=$(echo "$latest_releases" | tr '\n' ' ' | sed 's/ $//')
          current_versions_list=$(echo "$current_versions" | tr '\n' ' ' | sed 's/ $//')
          
          if [ "$new_versions_list" = "$current_versions_list" ]; then
            echo "No update needed"
            echo "needs-update=false" >> $GITHUB_OUTPUT
          else
            echo "Update needed"
            echo "needs-update=true" >> $GITHUB_OUTPUT
            
            # Backup original file
            cp docker-bake.hcl docker-bake.hcl.backup
            
            # Find start and end lines of DANTTO4K_VERSIONS block
            start_line=$(grep -n "variable \"DANTTO4K_VERSIONS\"" docker-bake.hcl | cut -d: -f1)
            end_line=$(sed -n "${start_line},\$p" docker-bake.hcl | grep -n "^}" | head -1 | cut -d: -f1)
            end_line=$((start_line + end_line - 1))
            
            # Create new versions block
            temp_versions=$(mktemp)
            echo "# renovate: datasource=github-releases depName=nekohkr/dantto4k" > "$temp_versions"
            echo "variable \"DANTTO4K_VERSIONS\" {" >> "$temp_versions"
            echo "  default = [" >> "$temp_versions"
            
            echo "$latest_releases" | while IFS= read -r version; do
              if [ -n "$version" ]; then
                echo "    \"$version\"," >> "$temp_versions"
              fi
            done
            
            echo "  ]" >> "$temp_versions"
            echo "  type    = list(string)" >> "$temp_versions"
            echo "}" >> "$temp_versions"
            
            echo "New versions section:"
            cat "$temp_versions"
            
            # Create new docker-bake.hcl
            temp_file=$(mktemp)
            head -n $((start_line - 1)) docker-bake.hcl > "$temp_file"
            cat "$temp_versions" >> "$temp_file"
            tail -n +$((end_line + 1)) docker-bake.hcl >> "$temp_file"
            
            # Replace original file
            mv "$temp_file" docker-bake.hcl
            rm "$temp_versions"
            
            echo "Updated docker-bake.hcl with latest 3 versions"
          fi

      - name: Commit changes
        if: steps.update-versions.outputs.needs-update == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b update-dantto4k-versions
          git add docker-bake.hcl
          git commit -m "chore: update dantto4k versions to latest 3 releases

          Updated DANTTO4K_VERSIONS array to contain only the latest 3 releases"
          git push origin update-dantto4k-versions --force

      - name: Create PR
        if: steps.update-versions.outputs.needs-update == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo
            const sourceBranch = "update-dantto4k-versions"
            const targetBranch = "main"
            
            // Check if PR already exists
            const { data: existingPRs } = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${sourceBranch}`,
              state: 'open'
            });
            
            if (existingPRs.length > 0) {
              console.log(`PR already exists: #${existingPRs[0].number}`);
              return;
            }
            
            const body = `## Dantto4k Versions Update

            This PR updates the DANTTO4K_VERSIONS array to contain only the latest 3 releases from the nekohkr/dantto4k repository.

            ### Changes Made

            - Updated DANTTO4K_VERSIONS in docker-bake.hcl to contain the latest 3 versions
            - Maintains chronological order (newest first)

            ### Why This Change

            - Keeps the build matrix manageable by limiting to 3 most recent versions
            - Automatically removes older versions that are no longer needed
            - Ensures we always test against the most current releases

            ### Testing

            Please verify that the docker-bake configuration is valid:
            \`\`\`bash
            docker buildx bake --print all
            \`\`\`

            ---

            ðŸ¤– This PR was created automatically by the dantto4k versions update workflow.`;

            const { data: pr } = await github.rest.pulls.create({
              owner,
              repo,
              head: sourceBranch,
              base: targetBranch,
              title: 'chore: update dantto4k versions to latest 3 releases',
              body: body,
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pr.number,
              labels: ['version-update']
            });
            
            console.log(`Created PR #${pr.number}: ${pr.html_url}`);
